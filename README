AUTHORS: John Little (jlittl04) and Aryan Pandey (apande04)
DATE: November 20th, 2019
PROGRAM: The Universal Machine
FILE: README

--------------------------------------------------------------------------------

ARCHITECTURE:
  Memory Module (memory.h):
    memory is organized as a Seq_T of segments. segments are just Hanson Seq_T
    structures of words making the whole memory pool essentially a 2D Seq_T.
    this design allowed for strong modularity and hiding of secrets but
    significantly harmed our performance due to Hanson's many layers of function
    calls. the memory module contains multiple management functions. These
    functions serve to allocate and deallocate memory safely and away from the
    main UM interface. This means that the UM actually has no direct control 
    over how memory is allocated and deallocated -- it just asks for it.

  Instruction Module (instructions.h):
    the UM asks for memory to be allocated (as well as 12 other operations)
    through the instructions module. the instructions module is responsible for 
    disassembling UM instructions and executing each of the 13 operations that
    this machine can complete. To this goal, the instructions module contains 
    functions to unpack register identifiers and the opcode from um instructions
    and to execute the specifc operation based on the values unpacked from the 
    instruction. 

  Universal Machine (um.c):
    the Universal Machine is built inside um.c as a module that relies on the 
    instructions and memory module. It contains the actual declarations of the 
    memory pool sequence (which it subsequently passes to the memory functions).
    It also is responsible for reading in and retrieving the instructions that 
    the instruction functions unpack and execute. It also contains the registers
    array representation. The UM module is the "glue" that combines all of our 
    components into an operational virtual machine.

TIME TO EXECUTE 50 MILLION INSTRUCTIONS:
  8 seconds
